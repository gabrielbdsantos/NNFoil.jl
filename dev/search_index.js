var documenterSearchIndex = {"docs":
[{"location":"#NNFoil","page":"Home","title":"NNFoil","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NNFoil.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#NNFoil.KulfanParameters","page":"Home","title":"NNFoil.KulfanParameters","text":"KulfanParameters{T,V}\n\nParameter container for the Kulfan (CST) airfoil shape formulation.\n\nThis type stores the upper and lower Bernstein polynomial weights, along with leading-edge and trailing-edge scalar parameters, all sharing a common floating-point element type T. The coordinate arrays are stored with a concrete vector type V<:AbstractVector{T} (e.g. Vector{T}, SVector{N,T}).\n\nType parameters\n\nT<:Real: floating-point element type.\nV<:AbstractVector{T}: concrete vector type used for the weight arrays.\n\nFields\n\nupper_weights::V: weights for the upper surface (commonly length 8).\nlower_weights::V: weights for the lower surface (commonly length 8).\nleading_edge_weight::T: scalar parameter controlling leading-edge thickness/rounding.\ntrailing_edge_thickness::T: scalar trailing-edge thickness parameter.\n\n\n\n\n\n","category":"type"},{"location":"#NNFoil.KulfanParameters-Union{Tuple{Tt}, Tuple{Tl}, Tuple{Vl}, Tuple{Vu}, Tuple{Vu, Vl, Tl, Tt}} where {Vu<:(AbstractVector{<:Real}), Vl<:(AbstractVector{<:Real}), Tl<:Real, Tt<:Real}","page":"Home","title":"NNFoil.KulfanParameters","text":"KulfanParameters(upper_weights, lower_weights, leading_edge_weight,\n    trailing_edge_thickness)\n\nConverting constructor for KulfanParameters that promotes all inputs to a common floating-point type T and returns a KulfanParameters{T, V} where V matches the concrete vector type of the provided weights arrays (after promotion).\n\nArguments\n\nupper_weights::AbstractVector{<:Real}: upper weights.\nlower_weights::AbstractVector{<:Real}: lower weights.\nleading_edge_weight::Real: LE scalar parameter.\ntrailing_edge_thickness::Real: TE thickness parameter.\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.airfoil_cst-Tuple{Any, Any, Any}","page":"Home","title":"NNFoil.airfoil_cst","text":"airfoil_cst(x, parameters, x_split_id; N1=0.5, N2=1.0)\n\nReconstruct an airfoil surface from Kulfan (CST) parameters.\n\nArguments\n\nx: Vector of nondimensional chordwise coordinates (0–1)\nparameters::AbstractVector: upper and lower weights, leading-edge weight,   trailing-edge thickness\nx_split_id::Int: Index separating upper and lower surface coordinates\nN1::Real: Leading-edge exponent (default: 0.5)\nN2::Real: Trailing-edge exponent (default: 1.0)\n\nReturns\n\nVector: Airfoil surface y-coordinates corresponding to x\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.airfoil_cst_zero_trailing_edge-Tuple{Any, Any, Any}","page":"Home","title":"NNFoil.airfoil_cst_zero_trailing_edge","text":"airfoil_cst_zero_trailing_edge(x, parameters, x_split_id; N1=0.5, N2=1.0)\n\nReconstruct an airfoil surface from Kulfan (CST) parameters with a zero trailing-edge gap.\n\nArguments\n\nx: Vector of nondimensional chordwise coordinates (0–1)\nparameters::AbstractVector: upper and lower weights, and leading-edge weight\nx_split_id::Int: Index separating upper and lower surface coordinates\nN1::Real: Leading-edge exponent (default: 0.5)\nN2::Real: Trailing-edge exponent (default: 1.0)\n\nReturns\n\nVector: Airfoil surface y-coordinates corresponding to x\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.bernstein-Union{Tuple{I}, Tuple{Any, I, I}} where I<:Signed","page":"Home","title":"NNFoil.bernstein","text":"bernstein(x, v, n)\n\nEvaluate the Bernstein basis polynomial of degree n and index v at x.\n\nArguments\n\nx: Evaluation points (scalar, vector, or array).\nv::Signed: Index of the basis polynomial.\nn::Signed: Degree of the polynomial.\n\nReturns\n\nArray of the same shape as x: Values of the Bernstein polynomial.\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.class_function-Tuple{Any, Any, Any}","page":"Home","title":"NNFoil.class_function","text":"class_function(x, N1, N2)\n\nEvaluate the class function used in Kulfan’s parametrization.\n\nArguments\n\nx: Nondimensional chordwise coordinates [0–1].\nN1::Real: Leading-edge exponent.\nN2::Real: Trailing-edge exponent.\n\nReturns\n\nArray of the same shape as x: Values of the class function\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.cst-NTuple{4, Any}","page":"Home","title":"NNFoil.cst","text":"cst(x, coefficients, leading_edge_weight, trailing_edge_thickness; N1=0.5, N2=1.0)\n\nCST (Class–Shape Transformation) airfoil parametrization.\n\nArguments\n\nx: Nondimensional chordwise coordinates [0, 1]\ncoefficients::AbstractVector: Shape function weights\nleading_edge_weight::Real: Leading-edge modification term\ntrailing_edge_thickness::Real: Trailing-edge thickness parameter\nN1::Real: Leading-edge exponent (default: 0.5)\nN2::Real: Trailing-edge exponent (default: 1.0)\n\nReturns\n\nSame shape as x: Airfoil surface coordinates defined by the CST parametrization\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.get_kulfan_parameters-Tuple{Any}","page":"Home","title":"NNFoil.get_kulfan_parameters","text":"get_kulfan_parameters(coordinates; num_coefficients=8, N1=0.5, N2=1.0)\n\nFit Kulfan (CST) parameters to airfoil coordinates.\n\nArguments\n\ncoordinates::AbstractMatrix: Airfoil coordinates with columns [x, y]\nnum_coefficients::Int: Number of Bernstein polynomial coefficients per surface   (default: 8)\nN1::Real: Leading-edge exponent (default: 0.5)\nN2::Real: Trailing-edge exponent (default: 1.0)\n\nReturns\n\nKulfanParameters: Fitted upper and lower weights, leading-edge weight, and   trailing-edge thickness\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.normalize_coordinates!-Tuple{Any}","page":"Home","title":"NNFoil.normalize_coordinates!","text":"normalize_coordinates!(coordinates)\n\nNormalize the input coordinates in place so that the x values lie within the unit interval [0, 1].\n\nArguments\n\ncoordinates::AbstractMatrix: Matrix of airfoil coordinates with columns representing the x and y values.\n\nwarning: Warning\nThe current normalization is a temporary workaround and may be revised in future versions of NNFoil so that it more closely matches how NeuralFoil normalizes coordinates.\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.shape_function-Tuple{Any, Any}","page":"Home","title":"NNFoil.shape_function","text":"shape_function(x, coefficients)\n\nKulfan shape function defined as a weighted sum of Bernstein polynomials.\n\nArguments\n\nx: Nondimensional chordwise coordinates [0, 1].\ncoefficients::AbstractVector: Weights for the Bernstein polynomials.\n\nReturns\n\nSame shape as x: Values of the shape function.\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.split_upper_lower_surfaces-Tuple{Any}","page":"Home","title":"NNFoil.split_upper_lower_surfaces","text":"split_upper_lower_surfaces(coordinates)\n\nSplit airfoil coordinates into upper and lower surfaces.\n\nArguments\n\ncoordinates::AbstractMatrix: Matrix of airfoil coordinates with columns representing the x and y values.\n\nReturns\n\n(upper, lower): Two matrices containing the coordinates of the upper and lower surfaces, respectively.\n\n\n\n\n\n","category":"method"}]
}
