var documenterSearchIndex = {"docs":
[{"location":"#NNFoil","page":"Home","title":"NNFoil","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NNFoil.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#NNFoil.KulfanParameters","page":"Home","title":"NNFoil.KulfanParameters","text":"KulfanParameters{T,V}\n\nParameter container for the Kulfan (CST) airfoil shape parameterization.\n\nThis type stores the upper and lower Bernstein polynomial weights, along with leading-edge and trailing-edge scalar parameters, all sharing a common floating-point element type T. The coordinate arrays are stored with a concrete vector type V<:AbstractVector{T} (e.g. Vector{T}, SVector{N,T}).\n\nType parameters\n\nT<:Real: floating-point element type.\nV<:AbstractVector{T}: concrete vector type used for the weight arrays.\n\nFields\n\nupper_weights::V: weights for the upper surface (commonly length 8).\nlower_weights::V: weights for the lower surface (commonly length 8).\nleading_edge_weight::T: scalar parameter controlling leading-edge thickness/rounding.\ntrailing_edge_thickness::T: scalar trailing-edge thickness parameter.\n\n\n\n\n\n","category":"type"},{"location":"#NNFoil.KulfanParameters-Union{Tuple{Tt}, Tuple{Tl}, Tuple{Vl}, Tuple{Vu}, Tuple{Vu, Vl, Tl, Tt}} where {Vu<:(AbstractVector{<:Real}), Vl<:(AbstractVector{<:Real}), Tl<:Real, Tt<:Real}","page":"Home","title":"NNFoil.KulfanParameters","text":"KulfanParameters(upper_weights, lower_weights, leading_edge_weight,\n    trailing_edge_thickness)\n\nConverting constructor for KulfanParameters that promotes all inputs to a common floating-point type T and returns a KulfanParameters{T, V} where V matches the concrete vector type of the provided weights arrays (after promotion).\n\nArguments\n\nupper_weights::AbstractVector{<:Real}: upper weights.\nlower_weights::AbstractVector{<:Real}: lower weights.\nleading_edge_weight::Real: LE scalar parameter.\ntrailing_edge_thickness::Real: TE thickness parameter.\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.NeuralNetworkOutput","page":"Home","title":"NNFoil.NeuralNetworkOutput","text":"NeuralNetworkOutput{V}\n\nStores the aerodynamic coefficients predicted by the neural network.\n\nType Parameters\n\nV<:AbstractVector{<:Real}: numeric vector type used for all output quantities.\n\nFields\n\nanalysis_confidence::V: confidence level of the neural network prediction.\nCL::V: lift coefficient values.\nCD::V: drag coefficient values.\nCM::V: moment coefficient values.\nTop_Xtr::V: transition location on the upper surface.\nBot_Xtr::V: transition location on the lower surface.\n\n\n\n\n\n","category":"type"},{"location":"#NNFoil.NeuralNetworkParameters","page":"Home","title":"NNFoil.NeuralNetworkParameters","text":"NeuralNetworkParameters{R, V, M, W, B}\n\nStores parameters of the pretrained neural network model.\n\nType Parameters\n\nR<:Real: numeric type used for all elements.\nV<:AbstractVector{R}: vector type (for input means and biases).\nM<:AbstractMatrix{R}: matrix type (for covariances and weight matrices).\nW<:AbstractVector{M}: collection of weight matrices, one per layer.\nB<:AbstractVector{V}: collection of bias vectors, one per layer.\n\nFields\n\nmean_inputs_scaled::V: mean values of the scaled input features.\ncov_inputs_scaled::M: covariance matrix of the scaled inputs.\ninv_cov_inputs_scaled::M: inverse of the covariance matrix.\nweights::W: vector of weight matrices for each layer.\nbiases::B: vector of bias vectors for each layer.\n\n\n\n\n\n","category":"type"},{"location":"#NNFoil.__evaluate_aero-Tuple{Any, Any}","page":"Home","title":"NNFoil.__evaluate_aero","text":"__evaluate_aero(network_parameters, x) -> NeuralNetworkOutput\n\nEvaluate the neural network for an input x using the pretrained parameters network_parameters, performing symmetry fusion and applying post-processing transformations to produce physically meaningful aerodynamic coefficients.\n\nArguments\n\nnetwork_parameters: Pretrained parameters of the neural network.\nx::AbstractMatrix: Input features for the original flow condition. Each   column corresponds to one input sample.\n\nReturns\n\nA NeuralNetworkOutput struct with fields:\n\nanalysis_confidence: confidence level (0–1)\nCL: lift coefficient\nCD: drag coefficient\nCM: moment coefficient\nTop_Xtr: upper-surface transition location (0–1)\nBot_Xtr: lower-surface transition location (0–1)\n\nnote: Note\nCurrently, boundary-layer related outputs are not supported. These are planned to be included in a future version.\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.__flip_x!-Tuple{T} where T<:(AbstractVecOrMat{<:Real})","page":"Home","title":"NNFoil.__flip_x!","text":"__flip_x!(x)\n\nFlip the input vector or matrix x in-place, creating a geometrically mirrored version of the input features.\n\nArguments\n\nx::AbstractVecOrMat{<:Real}: Input vector or matrix where each column   represents a sample. The flipping is applied across specific rows.\n\nReturns\n\nx: The modified input matrix, flipped in-place.\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.airfoil_cst-Tuple{Any, Any, Any}","page":"Home","title":"NNFoil.airfoil_cst","text":"airfoil_cst(x, parameters, x_split_id; N1=0.5, N2=1.0)\n\nReconstruct an airfoil surface from Kulfan (CST) parameters.\n\nArguments\n\nx: Vector of nondimensional chordwise coordinates (0–1)\nparameters::AbstractVector: upper and lower weights, leading-edge weight,   trailing-edge thickness\nx_split_id::Int: Index separating upper and lower surface coordinates\nN1::Real: Leading-edge exponent (default: 0.5)\nN2::Real: Trailing-edge exponent (default: 1.0)\n\nReturns\n\nVector: Airfoil surface y-coordinates corresponding to x\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.airfoil_cst_zero_trailing_edge-Tuple{Any, Any, Any}","page":"Home","title":"NNFoil.airfoil_cst_zero_trailing_edge","text":"airfoil_cst_zero_trailing_edge(x, parameters, x_split_id; N1=0.5, N2=1.0)\n\nReconstruct an airfoil surface from Kulfan (CST) parameters with a zero trailing-edge gap.\n\nArguments\n\nx: Vector of nondimensional chordwise coordinates (0–1)\nparameters::AbstractVector: upper and lower weights, and leading-edge weight\nx_split_id::Int: Index separating upper and lower surface coordinates\nN1::Real: Leading-edge exponent (default: 0.5)\nN2::Real: Trailing-edge exponent (default: 1.0)\n\nReturns\n\nVector: Airfoil surface y-coordinates corresponding to x\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.bernstein-Union{Tuple{I}, Tuple{Any, I, I}} where I<:Signed","page":"Home","title":"NNFoil.bernstein","text":"bernstein(x, v, n)\n\nEvaluate the Bernstein basis polynomial of degree n and index v at x.\n\nArguments\n\nx: Evaluation points (scalar, vector, or array).\nv::Signed: Index of the basis polynomial.\nn::Signed: Degree of the polynomial.\n\nReturns\n\nArray of the same shape as x: Values of the Bernstein polynomial.\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.class_function-Tuple{Any, Any, Any}","page":"Home","title":"NNFoil.class_function","text":"class_function(x, N1, N2)\n\nEvaluate the class function used in Kulfan’s parametrization.\n\nArguments\n\nx: Nondimensional chordwise coordinates [0–1].\nN1::Real: Leading-edge exponent.\nN2::Real: Trailing-edge exponent.\n\nReturns\n\nArray of the same shape as x: Values of the class function\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.cst-NTuple{4, Any}","page":"Home","title":"NNFoil.cst","text":"cst(x, coefficients, leading_edge_weight, trailing_edge_thickness; N1=0.5, N2=1.0)\n\nCST (Class–Shape Transformation) airfoil parametrization.\n\nArguments\n\nx: Nondimensional chordwise coordinates [0, 1]\ncoefficients::AbstractVector: Shape function weights\nleading_edge_weight::Real: Leading-edge modification term\ntrailing_edge_thickness::Real: Trailing-edge thickness parameter\nN1::Real: Leading-edge exponent (default: 0.5)\nN2::Real: Trailing-edge exponent (default: 1.0)\n\nReturns\n\nSame shape as x: Airfoil surface coordinates defined by the CST parametrization\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.get_aero_from_kulfan_parameters-Union{Tuple{Tb}, Tuple{Ta}, Tuple{NNFoil.NeuralNetworkParameters, NNFoil.KulfanParameters, Ta, Tb}} where {Ta<:(AbstractVector{<:Real}), Tb<:(AbstractVector{<:Real})}","page":"Home","title":"NNFoil.get_aero_from_kulfan_parameters","text":"get_aero_from_kulfan_parameters(\n    network_parameters,\n    kulfan_parameters,\n    alpha,\n    Reynolds;\n    n_crit=9,\n    xtr_upper=1,\n    xtr_lower=1\n) -> NeuralNetworkOutput\n\nCompute aerodynamic coefficients from Kulfan airfoil parameters using a pretrained neural network.\n\nThis function supports scalar and vector inputs for both the angle of attack alpha and the Reynolds number. If either is a scalar while the other is a vector, the scalar will be broadcasted to match the length of the vector.\n\nArguments\n\nnetwork_parameters::NeuralNetworkParameters: Pretrained neural network parameters.\nkulfan_parameters::KulfanParameters: Kulfan shape parameters describing the airfoil.\nalpha: Angle(s) of attack in degrees (Real or AbstractVector{<:Real}).\nReynolds: Reynolds number(s) corresponding to each alpha (Real or AbstractVector{<:Real}).\nn_crit::Real=9: Critical amplification factor for transition prediction.\nxtr_upper::Real=1: Forced transition location on the upper surface.\nxtr_lower::Real=1: Forced transition location on the lower surface.\n\nReturns\n\nNeuralNetworkOutput: Predicted aerodynamic coefficients.\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.get_kulfan_parameters-Tuple{Any}","page":"Home","title":"NNFoil.get_kulfan_parameters","text":"get_kulfan_parameters(coordinates; num_coefficients=8, N1=0.5, N2=1.0)\n\nFit Kulfan (CST) parameters to airfoil coordinates.\n\nArguments\n\ncoordinates::AbstractMatrix: Airfoil coordinates with columns [x, y]\nnum_coefficients::Int: Number of Bernstein polynomial coefficients per surface   (default: 8)\nN1::Real: Leading-edge exponent (default: 0.5)\nN2::Real: Trailing-edge exponent (default: 1.0)\n\nReturns\n\nKulfanParameters: Fitted upper and lower weights, leading-edge weight, and   trailing-edge thickness\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.load_network_parameters-Tuple{}","page":"Home","title":"NNFoil.load_network_parameters","text":"load_network_parameters(; model_size=:xlarge, T=Float64)\n\nLoad and convert the pretrained neural network parameters used by NeuralFoil.\n\nArguments\n\nmodel_size::Symbol=:xlarge: Size of the pretrained model parameters to load.\nT::Type=Float64: Numerical type to which all loaded arrays will be  converted.\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.net-Tuple{NNFoil.NeuralNetworkParameters, AbstractArray{<:Real}}","page":"Home","title":"NNFoil.net","text":"net(network_parameters::NetworkParameters, x::AbstractMatrix{<:Real})\n\nEvaluate the neural network using the pretrained network parameters on the given input x.\n\nArguments\n\nnetwork_parameters::NetworkParameters: pretrained network weights and biases.\nx::AbstractArray{<:Real}: Input data.\n\nReturns\n\nAbstractMatrix{<:Real}\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.normalize_coordinates!-Tuple{Any}","page":"Home","title":"NNFoil.normalize_coordinates!","text":"normalize_coordinates!(coordinates)\n\nNormalize the input coordinates in place so that the x values lie within the unit interval [0, 1].\n\nArguments\n\ncoordinates::AbstractMatrix: Matrix of airfoil coordinates with columns representing the x and y values.\n\nwarning: Warning\nThe current normalization is a temporary workaround and may be revised in future versions of NNFoil so that it more closely matches how NeuralFoil normalizes coordinates.\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.shape_function-Tuple{Any, Any}","page":"Home","title":"NNFoil.shape_function","text":"shape_function(x, coefficients)\n\nKulfan shape function defined as a weighted sum of Bernstein polynomials.\n\nArguments\n\nx: Nondimensional chordwise coordinates [0, 1].\ncoefficients::AbstractVector: Weights for the Bernstein polynomials.\n\nReturns\n\nSame shape as x: Values of the shape function.\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.sigmoid-Tuple{T} where T","page":"Home","title":"NNFoil.sigmoid","text":"sigmoid(x::T; ln_eps=log(10 / floatmax(eltype(T)))) where {T}\n\nApply the sigmoid activation function elementwise. Also employ input clipping for numerical stability.\n\nArguments\n\nx::T: Input value.\nln_eps::Real=log(10 / floatmax(eltype(T))): Logarithmic bound used to   clip input values for stability.\n\nReturns\n\nScalar or Array of the same shape as x: Values in the range (0, 1).\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.split_upper_lower_surfaces-Tuple{Any}","page":"Home","title":"NNFoil.split_upper_lower_surfaces","text":"split_upper_lower_surfaces(coordinates)\n\nSplit airfoil coordinates into upper and lower surfaces.\n\nArguments\n\ncoordinates::AbstractMatrix: Matrix of airfoil coordinates with columns representing the x and y values.\n\nReturns\n\n(upper, lower): Two matrices containing the coordinates of the upper and lower surfaces, respectively.\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.squared_mahalanobis_distance-Union{Tuple{T}, Tuple{NNFoil.NeuralNetworkParameters, T}} where T<:(AbstractArray{<:Real})","page":"Home","title":"NNFoil.squared_mahalanobis_distance","text":"squared_mahalanobis_distance(network_parameters::NetworkParameters,\n    x::AbstractMatrix{<:Real})\n\nCompute the squared Mahalanobis distance between input samples and the mean of the scaled input distribution.\n\nArguments\n\nnetwork_parameters::NetworkParameters: pretrained neural network parameters containing   the mean and inverse covariance of the scaled input distribution.\nx::AbstractArray{<:Real}: Input samples.\n\nReturns\n\nAbstractArray{<:Real}\n\n\n\n\n\n","category":"method"},{"location":"#NNFoil.swish-Tuple{Any}","page":"Home","title":"NNFoil.swish","text":"swish(x; beta=1)\n\nApply the Swish activation function elementwise.\n\nArguments\n\nx: Input value.\nbeta::Real=1: Slope parameter controlling smoothness.\n\nReturns\n\nScalar or Array of the same shape as x: Activated values.\n\n\n\n\n\n","category":"method"}]
}
